{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Italic;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\i\fs26 \cf0 // #popclip extension for Google Gemini
\f1\i0 \

\f0\i // name: Emoji Autocomplete by Gemini
\f1\i0 \

\f0\i // identifier: com.example.gemini-emoji-autocomplete
\f1\i0 \

\f0\i // description: Autocomplete emoji with Gemini
\f1\i0 \

\f0\i // icon: symbol:face.smiling
\f1\i0 \

\f0\i // language: javascript
\f1\i0 \

\f0\i // module: true
\f1\i0 \

\f0\i // entitlements: [network]
\f1\i0 \

\f0\i // options:
\f1\i0 \

\f0\i // - identifier: apikey
\f1\i0 \

\f0\i //   label: API Key
\f1\i0 \

\f0\i //   type: string
\f1\i0 \

\f0\i //   description: Obtain API key from Google Cloud Console
\f1\i0 \
\
"use strict";\
\
Object.defineProperty(exports, "__esModule", \{ value: true \});\
\
const axios = require("axios");\
\
async function prompt(input, \{ apikey \}) \{\
  const content = input.text.trim();\
  const prompt = `Analyze the emotion in the following text and insert suitable emojis throughout the text to represent the sentiment. Do not provide any explanations or translations:\
\
$\{content\}`;\
\
  const requestBody = \{\
    "contents": [\{ "parts": [\{ "text": prompt \}] \}],\
    "safetySettings": [\
      \{ "category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_ONLY_HIGH" \}\
    ],\
    "generationConfig": \{\
      "stopSequences": [],\
      "temperature": 1.0,\
      "maxOutputTokens": 800,\
      "topP": 0.8,\
      "topK": 10\
    \}\
  \};\
\
  try \{\
    const response = await axios.post(\
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=$\{apikey\}`,\
      requestBody,\
      \{ headers: \{ 'Content-Type': 'application/json' \} \}\
    );\
\
    const textWithEmojis = response.data.candidates[0].content.parts.map(part => part.text).join('');\
    popclip.pasteText(textWithEmojis, \{ restore: true \});\
  \} catch (error) \{\
    console.error("Error autocompleting emoji:", error);\
    popclip.showError("Error autocompleting emoji: " + error.message);\
  \}\
\
  return null;\
\}\
\
exports.actions = [\
  \{\
    title: "Autocomplete emoji with Gemini",\
    code: prompt,\
    icon: "symbol:face.smiling",\
    requirements: ["text", "copy"],\
  \},\
];}